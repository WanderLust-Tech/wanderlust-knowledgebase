name: Build and Deploy (Version Changes)

on:
  push:
    branches: [ main, master ]
    # We'll detect version changes in the job, not in the trigger paths
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '18'

jobs:
  check-version-change:
    name: Check Version Changes
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      old-version: ${{ steps.version-check.outputs.old-version }}
      new-version: ${{ steps.version-check.outputs.new-version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check for version changes in package.json
      id: version-check
      run: |
        # Get current version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Get previous version (if it exists)
        if git show HEAD~1:package.json 2>/dev/null; then
          OLD_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
          echo "old-version=$OLD_VERSION" >> $GITHUB_OUTPUT
          
          if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "🎉 Version changed from $OLD_VERSION to $NEW_VERSION"
            echo "🚀 This will trigger a deployment build"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Version unchanged ($NEW_VERSION)"
          fi
        else
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "old-version=unknown" >> $GITHUB_OUTPUT
          echo "🎉 Initial version: $NEW_VERSION"
        fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [check-version-change]
    if: needs.check-version-change.outputs.version-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Display Version Change Info
      run: |
        echo "🎯 Version-triggered deployment build"
        echo "📦 Old version: ${{ needs.check-version-change.outputs.old-version }}"
        echo "🚀 New version: ${{ needs.check-version-change.outputs.new-version }}"
        echo "🔄 This deployment was triggered by a version change"
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, check-version-change]
    if: github.ref == 'refs/heads/develop' && (needs.check-version-change.outputs.version-changed == 'true' || github.event_name == 'workflow_dispatch')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install deployment dependencies
      run: npm install basic-ftp dotenv
      
    - name: Deploy to staging via FTP
      env:
        FTP_HOST: ${{ secrets.STAGING_FTP_HOST }}
        FTP_USER: ${{ secrets.STAGING_FTP_USER }}
        FTP_PASSWORD: ${{ secrets.STAGING_FTP_PASSWORD }}
        FTP_PORT: ${{ secrets.STAGING_FTP_PORT }}
        FTP_SECURE: ${{ secrets.STAGING_FTP_SECURE }}
        FTP_REMOTE_PATH: ${{ secrets.STAGING_FTP_REMOTE_PATH }}
        LOCAL_BUILD_PATH: ./dist
        CLEAR_REMOTE: true
      run: node scripts/deploy.js deploy

  deploy-production:
    name: Deploy to Production (Version Changes)
    runs-on: ubuntu-latest
    needs: [build, check-version-change]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (needs.check-version-change.outputs.version-changed == 'true' || github.event_name == 'workflow_dispatch')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install deployment dependencies
      run: npm install basic-ftp dotenv
      
    - name: Create backup before deployment
      env:
        FTP_HOST: ${{ secrets.PROD_FTP_HOST }}
        FTP_USER: ${{ secrets.PROD_FTP_USER }}
        FTP_PASSWORD: ${{ secrets.PROD_FTP_PASSWORD }}
        FTP_PORT: ${{ secrets.PROD_FTP_PORT }}
        FTP_SECURE: ${{ secrets.PROD_FTP_SECURE }}
        FTP_REMOTE_PATH: ${{ secrets.PROD_FTP_REMOTE_PATH }}
      run: node scripts/deploy.js backup
      
    - name: Deploy to production via FTP
      env:
        FTP_HOST: ${{ secrets.PROD_FTP_HOST }}
        FTP_USER: ${{ secrets.PROD_FTP_USER }}
        FTP_PASSWORD: ${{ secrets.PROD_FTP_PASSWORD }}
        FTP_PORT: ${{ secrets.PROD_FTP_PORT }}
        FTP_SECURE: ${{ secrets.PROD_FTP_SECURE }}
        FTP_REMOTE_PATH: ${{ secrets.PROD_FTP_REMOTE_PATH }}
        LOCAL_BUILD_PATH: ./dist
        CLEAR_REMOTE: true
      run: node scripts/deploy.js deploy
      
    - name: Upload backup artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backup-${{ github.sha }}
        path: backups/
        retention-days: 90

  # Alternative deployment using rsync (if you have SSH access)
  deploy-ssh:
    name: Deploy via SSH/Rsync
    runs-on: ubuntu-latest
    needs: [build, check-version-change]
    if: false # Set to true to enable SSH deployment
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Setup SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
        
    - name: Deploy via rsync
      run: |
        rsync -avz --delete dist/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PATH }}

  # Alternative deployment to GitHub Pages
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build, check-version-change]
    if: false # Set to true to enable GitHub Pages deployment
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
